import csv
import datetime
import logging
import matplotlib.pyplot as plt
import monitor_performance
import numpy as np
import os
import re
import utils.datetime_utils

LOGGING_FORMAT = '%(asctime)s,%(msecs)d %(levelname)-5s ' \
'[%(filename)s:%(lineno)d] %(message)s'
DATE_FORMAT = '%d-%m-%Y:%H:%M:%S'

MOTION_DATETIME_FORMAT = '%Y%m%d%H%M%S'

# <event_id>-<datetime>-<frame_number>.jpg
MOTION_IMAGE_FILE_PATTERN = r'(^\d+)-(\d+)-\d+\.jpg$'

# <timestamp in ms>.jpg
OPENCV_IMAGE_FILE_PATTERN = r'(^\d+)\.jpg$'

# key names, other key names are defined in monitor_performance.py
EVENT = 'event'


def read_perf_data(perf_data_file):
  '''Reads a csv file generated by monitor_performance.py, and gets
  performance measurements.
  Returns:
  A list of dicts each of which has a timestamp, cpu usage, and memory
  usage.
  '''
  entries = []
  with open(perf_data_file) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
      # convert value to float
      converted_row = {k: float(v) for k, v in row.items()}
      entries.append(converted_row)
      
  logging.info('Read %d entries from %s', len(entries), perf_data_file)
  logging.info('first entry: %s', str(entries[0]))
  logging.info('last entry: %s', str(entries[-1]))
  return entries

def get_motion_event_times(captured_images_dir):
  '''Reads a directory that stores images captured by motion and gets
  events id and timestamps.
  Returns:
  A list of dicts each of which has a timestamp and event id.
  '''
  all_files = [f for f in os.listdir(captured_images_dir) if \
  os.path.isfile(os.path.join(captured_images_dir, f))]
  logging.info('%d files in %s', len(all_files), captured_images_dir)
  
  p = re.compile(MOTION_IMAGE_FILE_PATTERN)
  events = []
  for f in all_files:
    m = p.match(f)
    if m:
      event_id = '_'.join([EVENT, m.group(1)])
      ts = utils.datetime_utils.datetime_str_to_timestamp(m.group(2),\
      MOTION_DATETIME_FORMAT)
      events.append({EVENT: event_id, \
      monitor_performance.TIMESTAMP: ts})
  
  logging.info('%d events captured by motion in %s', \
  len(events), captured_images_dir)
  logging.info('First stored event: %s', str(events[0]))
  return events
  
def get_opencv_event_times(captured_images_dir):
  '''Reads a directory that stores images captured by motion and gets
  events id and timestamps.
  Returns:
  A list of dicts each of which has a timestamp and event id.
  '''
  all_files = [f for f in os.listdir(captured_images_dir) if \
  os.path.isfile(os.path.join(captured_images_dir, f))]
  logging.info('%d files in %s', len(all_files), captured_images_dir)
  
  p = re.compile(OPENCV_IMAGE_FILE_PATTERN)
  events = []
  event_no = 1;
  for f in all_files:
    m = p.match(f)
    if m:
      event_id = '_'.join([EVENT, str(event_no)])
      event_no += 1
      ts = int(m.group(1))/1000.0
      events.append({EVENT: event_id, \
      monitor_performance.TIMESTAMP: ts})
  
  logging.info('%d events captured by opencv in %s', \
  len(events), captured_images_dir)
  logging.info('First stored event: %s', str(events[0]))
  return events

def plot_measurements(perf_data, events, file_name):
  '''Plot cpu usage, memory usage, and events in a graph and save it to
  the given file name.
  '''
  # Note that using plt.subplots below is equivalent to using
  # fig = plt.figure() and then ax = fig.add_subplot(111)
  # figsize is (width, height), where the generated figure is 
  # width*100 x height*100 pixels 
  fig, ax = plt.subplots(figsize=(20,10))
  
  # usage
  ts = np.array([entry[monitor_performance.TIMESTAMP] \
  for entry in perf_data])
  cpu_usage = np.array([entry[monitor_performance.CPU_USAGE] \
  for entry in perf_data])
  mem_usage = np.array([entry[monitor_performance.MEM_USAGE] \
  for entry in perf_data])
  ax.plot(ts, cpu_usage, label = 'cpu usage')
  ax.plot(ts, mem_usage, label = 'memory usage')
  
  # events
  event_ids = [entry[EVENT] for entry in events]
  event_ts = np.array([entry[monitor_performance.TIMESTAMP] for entry \
  in events])
  event_height = 0.3
  event_heights = np.array(np.zeros(len(event_ts))) + event_height
  ax.scatter(event_ts, event_heights, c = 'r', label = 'events')
  
  # legend
  ax.legend()
  
  # use hours as xticks. '- ts.min()%3600' is used to remove the minutes
  # and seconds part
  ts_xlabel = np.arange(ts.min() - ts.min()%3600, ts.max() + 3600, 3600)
  # get the hours of these timestamps
  hours_xlabel = [datetime.datetime.fromtimestamp(entry).hour for \
  entry in ts_xlabel]
  ax.set_xticks(ts_xlabel)
  ax.set_xticklabels(hours_xlabel)

  ax.set(xlabel='Hours', ylabel='Usage',
         title='CPU and Memory Usage')
  ax.grid()

  fig.savefig(file_name)
  logging.info('Figure saved to %s', file_name)
  # plt.show()


if __name__=='__main__':
  logging.basicConfig(format=LOGGING_FORMAT, datefmt=DATE_FORMAT, \
    level=logging.DEBUG)
  
  # load measurements data for motion
  # perf_data = read_perf_data('test_data/perf-2018-07-15-00-44-19.csv')
  # events = get_event_times('/home/pi/Documents/motion_detections-2018-07-15')
  # file_name = 'figs/perf-2018-07-15.jpg'
  
  # load measurements data for opencv
  events = get_opencv_event_times('/home/pi/Documents/cv_images')
  perf_data = read_perf_data('test_data/perf-2018-07-21-22-39-09.csv')
  perf_data.extend(read_perf_data('test_data/perf-2018-07-22-12-14-06.csv'))
  file_name = 'figs/opencv-perf-2018-07-22.jpg'
  plot_measurements(perf_data, events, file_name)
  
